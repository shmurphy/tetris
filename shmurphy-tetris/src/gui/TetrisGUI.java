/*
 * TCSS 305
 * Assignment 6 - Tetris
 */
package gui;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;
import javax.swing.Timer;

import model.Board;
import sound.SoundPlayer;

/**
 * The GUI for Tetris.
 * 
 * @author Shannon Murphy
 * @version 13 March 2015
 */
public class TetrisGUI {
    
    /** The delay for the Timer. */
    private static final int TIMER_DELAY = 1000;
    
    /** A ToolKit. */
    private static final Toolkit KIT = Toolkit.getDefaultToolkit();
    
    /** The Dimension of the screen. */
    private static final Dimension SCREEN_SIZE = KIT.getScreenSize();
    
    /** The frame for the GUI. */
    private final JFrame myFrame;
    
    /** The Panel where the game is played. */
    private final GamePanel myGamePanel;
    
    /** The Board containing data about the game. */
    private final Board myBoard;
    
    /** The menu bar for the gui. */
    private final TetrisMenuBar myMenuBar;
    
    /** The Timer that controls the game. */
    private Timer myTimer;
    
        
    /**
     * Constructs a new TetrisGUI.
     */
    public TetrisGUI() {
        myFrame = new JFrame("Tetris - Shannon Murphy");
        myBoard = new Board();
        createTimer();
        myGamePanel = new GamePanel(myBoard, myTimer); 
        myMenuBar = new TetrisMenuBar(myFrame, myTimer, myBoard, 
                                                        myGamePanel);
        myGamePanel.addPropertyChangeListener(myMenuBar);
        myFrame.setJMenuBar(myMenuBar);
    }
    
    /** Displays the GUI. */
    public void start() {
        myFrame.add(myGamePanel, BorderLayout.CENTER);
        myFrame.pack();
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        myFrame.setLocation(SCREEN_SIZE.width / 2 - myFrame.getWidth() / 2,
                            SCREEN_SIZE.height / 2 - myFrame.getHeight() / 2);
        myFrame.setResizable(false);
        myFrame.setVisible(true);
        myFrame.addKeyListener(new MovePieceKeyListener());
    }
    
    /** Creates the Timer. */
    private void createTimer() {
        myTimer = new Timer(TIMER_DELAY, null);
        myTimer.setInitialDelay(TIMER_DELAY);
        myTimer.addActionListener(new ActionListener() {
            /** Starts the board animation. */
            public void actionPerformed(final ActionEvent theEvent) {
                myBoard.step();
            }
        });
    }
    
    /**
     * Listens for keystrokes to move the current piece.
     */
    private class MovePieceKeyListener extends KeyAdapter {
        
        /**
         * Handles a key being typed.
         * 
         * @param theEvent The KeyEvent generated by the key.
         */
        public void keyPressed(final KeyEvent theEvent) {
            if (myTimer.isRunning()) {
                movePiece(theEvent);
            }
        }
        
        /** 
         * Moves the current piece based on the key event. 
         * 
         * @param theEvent the KeyEvent typed by the user.
         */
        private void movePiece(final KeyEvent theEvent) {
            final SoundPlayer s = new SoundPlayer();
            final boolean muteStatus = myMenuBar.isMuted();
            if (theEvent.getKeyCode() == KeyEvent.VK_LEFT) {
                myBoard.left();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_RIGHT) {
                myBoard.right();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_DOWN) {
                myBoard.down();
            } else if (theEvent.getKeyCode() == KeyEvent.VK_SPACE) {
                myBoard.drop();
                if (!muteStatus) {
                    s.play("./sounds//blip.wav");
                } 
            } else if (theEvent.getKeyCode() == KeyEvent.VK_UP
                           || theEvent.getKeyCode() == KeyEvent.VK_X) {
                myBoard.rotateCW();
                if (!muteStatus) {
                    s.play("./sounds//blurp_x.wav");
                }
            } else if (theEvent.getKeyCode() == KeyEvent.VK_Z) {
                myBoard.rotateCCW();
                if (!muteStatus) {
                    s.play("./sounds//boing_x.wav");
                }
            }
        }
    }
}
